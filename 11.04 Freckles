//这道题给的是坐标
#include <iostream>
#include<stdio.h>
#include<math.h>
#include<algorithm>
#define N 101
using namespace std;

int Tree[N];

int FindRoot(int x){//找根节点
    if(Tree[x]==-1) return x;
    else{
        Tree[x]=FindRoot(Tree[x]);
        return Tree[x];
    }
}

typedef struct Edge{
    int a,b;
    double distance;
}Edge;
int cmp(Edge a,Edge b){
    return a.distance<b.distance;
}

typedef struct Point{
    double x,y;
}Point;
double getdis(Point a,Point b){
    return sqrt(pow(b.y-a.y,2)+pow(b.x-a.x,2));
}

int main(){
    int n;
    while(cin>>n){
        Point p[N];
        Edge e[N*(N-1)/2];
        int i;
        for(i=1;i<=n;i++)
            cin>>p[i].x>>p[i].y;
        int size=0;
        for(i=1;i<=n;i++)
            for(int j=i+1;j<=n;j++){
                e[size].a=i;
                e[size].b=j;
                e[size++].distance=getdis(p[i],p[j]);
            }//相当于构成一个无向完全图
        sort(e,e+size,cmp);    //按边的大小进行排序，之后进行集合的合并操作，得到的肯定是最小生成树
        for(i=1;i<=n;i++)
            Tree[i]=-1;//初始化树节点
        int a,b;
        double d=0;
        for(i=0;i<size;i++){
            a=FindRoot(e[i].a);
            b=FindRoot(e[i].b);
            if(a!=b){
                Tree[b]=a;
                d+=e[i].distance;
            }
        }
        printf("%.2lf\n",d); 
    }
    return 0;
}
